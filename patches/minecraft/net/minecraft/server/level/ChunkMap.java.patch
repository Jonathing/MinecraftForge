--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -393,6 +_,7 @@
                 this.modified = true;
             }
 
+            net.minecraftforge.event.ForgeEventFactory.fireChunkTicketLevelUpdated(this.level, p_140177_, p_140180_, p_140178_, p_140179_);
             return p_140179_;
         }
     }
@@ -519,6 +_,7 @@
                 if (this.pendingUnloads.remove(p_140182_, p_140183_) && chunkaccess != null) {
                     if (chunkaccess instanceof LevelChunk levelchunk) {
                         levelchunk.setLoaded(false);
+                        net.minecraftforge.event.ForgeEventFactory.onChunkUnload(chunkaccess);
                     }
 
                     this.save(chunkaccess);
@@ -769,6 +_,7 @@
                 this.activeChunkWrites.incrementAndGet();
                 SerializableChunkData serializablechunkdata = SerializableChunkData.copyOf(this.level, p_140259_);
                 CompletableFuture<CompoundTag> completablefuture = CompletableFuture.supplyAsync(serializablechunkdata::write, Util.backgroundExecutor());
+                net.minecraftforge.event.ForgeEventFactory.onChunkDataSave(p_140259_, p_140259_.getWorldForge() != null ? p_140259_.getWorldForge() : this.level, serializablechunkdata);
                 this.write(chunkpos, completablefuture::join).handle((p_358676_, p_358677_) -> {
                     if (p_358677_ != null) {
                         this.level.getServer().reportChunkSaveFailure(p_358677_, this.storageInfo(), chunkpos);
@@ -934,10 +_,22 @@
     void forEachSpawnCandidateChunk(Consumer<ChunkHolder> p_364582_) {
         LongIterator longiterator = this.distanceManager.getSpawnCandidateChunks();
 
+        // FORGE: separated forEach logic into its own method
+        this.forEachChunk(longiterator, this::anyPlayerCloseEnoughForSpawningInternal, p_364582_);
+    }
+
+    /** FORGE: grab forced chunks, use forEachChunk to avoid duplicate logic */
+    void forEachForcedChunk(Consumer<ChunkHolder> callback) {
+        LongIterator longiterator = this.distanceManager.forcedTickets.keySet().iterator();
+        this.forEachChunk(longiterator, pos -> true, callback);
+    }
+
+    /** FORGE: commonize logic between forEachSpawnCandidateChunk and forEachForcedChunk */
+    private void forEachChunk(LongIterator longiterator, java.util.function.Predicate<ChunkPos> filter, Consumer<ChunkHolder> p_364582_) {
         while (longiterator.hasNext()) {
             long i = longiterator.nextLong();
             ChunkHolder chunkholder = this.visibleChunkMap.get(i);
-            if (chunkholder != null && this.anyPlayerCloseEnoughForSpawningInternal(chunkholder.getPos())) {
+            if (chunkholder != null && filter.test(chunkholder.getPos())) {
                 p_364582_.accept(chunkholder);
             }
         }
@@ -1102,7 +_,7 @@
     }
 
     protected void addEntity(Entity p_140200_) {
-        if (!(p_140200_ instanceof EnderDragonPart)) {
+        if (!(p_140200_ instanceof net.minecraftforge.entity.PartEntity)) {
             EntityType<?> entitytype = p_140200_.getType();
             int i = entitytype.clientTrackingRange() * 16;
             if (i != 0) {
